{"version":3,"sources":["components/ImgCard.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","images","map","elem","i","key","className","data-toggle","alt","id","src","image","onClick","handleShuffle","idArray","App","state","score","topScore","content","indexOf","push","setState","array","temp","length","j","Math","floor","random","shuffle","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"81DAYeA,MATf,SAAiBC,GACb,OAEIA,EAAMC,OAAOC,KAAI,SAACC,EAAKC,GAAN,OACb,0BAAMC,IAAKD,EAAGE,UAAU,iBAAgB,yBAAKC,cAAY,gBAAgBD,UAAU,QAAQE,IAAKL,EAAKM,GAAIC,IAAKP,EAAKQ,MAAOC,QAAS,kBAAIZ,EAAMa,cAAcV,EAAKM,Y,OCDxKK,G,MAAS,IAqEEC,M,2MAjEXC,MAAM,CACFf,OAAOA,EACPgB,MAAO,EACPC,SAAU,EACVC,QAAQ,4B,EAGZN,cAAgB,SAACJ,IAEc,IAAxBK,EAAQM,QAAQX,IACfK,EAAQO,KAAKZ,GACb,EAAKa,SAAS,CAACH,QAAS,yBAAyBF,MAAO,EAAKD,MAAMC,MAAQ,IACxE,EAAKD,MAAMC,OAAO,EAAKD,MAAME,UAC5B,EAAKI,SAAS,CAAEJ,SAAU,EAAKF,MAAMC,MAAO,MAIhDH,EAAS,GACT,EAAKQ,SAAS,CAACH,QAAS,2BAA6BF,MAAM,KAE/D,IAAMhB,EA8Bd,SAAiBsB,GACb,IAEEC,EAFEpB,EAAImB,EAAME,OACZC,EAAI,EAGN,KAAOtB,KACLsB,EAAIC,KAAKC,MAAMD,KAAKE,UAAYzB,EAAI,IAEpCoB,EAAOD,EAAMnB,GACbmB,EAAMnB,GAAKmB,EAAMG,GACjBH,EAAMG,GAAKF,EAEb,OAAOD,EA1CYO,CAAQ,EAAKd,MAAMf,QAClC,EAAKqB,SAAS,CAACrB,Y,wEAIf,OACI,6BACA,yBAAKK,UAAU,sBACX,wBAAIA,UAAU,qCAAoC,wBAAIA,UAAU,gBAAd,cAC9C,wBAAIA,UAAU,YAAYyB,KAAKf,MAAMG,SACrC,wBAAIb,UAAU,YAAd,WAAkCyB,KAAKf,MAAMC,MAA7C,kBAAmEc,KAAKf,MAAME,SAA9E,OAGR,yBAAKZ,UAAU,aACX,4CACA,yGAEJ,yBAAKA,UAAU,aAEX,kBAAC,EAAD,CAASL,OAAQ8B,KAAKf,MAAMf,OAAQY,cAAgBkB,KAAKlB,iBAE7D,4BAAQP,UAAY,UAChB,kD,GA5CE0B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be58cddb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./imgCard.css\"\n\nfunction ImgCard(props){\n    return(\n\n        props.images.map((elem,i)=>    \n            <span key={i} className=\"img-container\"><img data-toggle=\"popover-hover\" className=\"image\" alt={elem.id} src={elem.image} onClick={()=>props.handleShuffle(elem.id)} /></span>\n        )\n    )\n}\n\nexport default ImgCard;","import React from \"react\";\nimport ImgCard from \"./components/ImgCard\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n\n\nlet idArray =[]\n\nclass App extends React.Component{\n\n    state={\n        images:images,\n        score: 0,\n        topScore: 0,\n        content:\"Click an image to begin!\"\n    }\n\n    handleShuffle = (id) => {\n\n        if(idArray.indexOf(id)=== -1){\n            idArray.push(id);\n            this.setState({content: \"You guessed correctly!\",score: this.state.score + 1})\n            if(this.state.score>=this.state.topScore){\n                this.setState({ topScore: this.state.score +1})\n            }\n        }\n        else{\n            idArray =[]\n            this.setState({content: \"You guessed incorrectly!\" , score:0})\n        }\n        const images = shuffle(this.state.images)\n        this.setState({images});\n      };\n       \n    render(){\n        return(\n            <div>\n            <nav className=\"navbar navbar-dark\">\n                <ul className=\"navbar-nav bd-navbar-nav flex-row\"><li className=\"navbar-brand\">ClickyGame</li>\n                    <li className=\"nav-item\">{this.state.content}</li>\n                    <li className=\"nav-item\">Score : {this.state.score} | Top Score : {this.state.topScore} </li>\n                </ul>\n            </nav>\n            <div className=\"jumbotron\">\n                <h1>Clicky Game!</h1>\n                <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n            </div>\n            <div className=\"container\">\n                \n                <ImgCard images={this.state.images} handleShuffle ={this.handleShuffle}/>\n            </div>\n            <footer className = \"footer\">\n                <div>Clicky Game</div>\n            </footer>\n            </div>\n        )\n    }\n\n}\n\nfunction shuffle(array) {\n    var i = array.length,\n      j = 0,\n      temp;\n\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}